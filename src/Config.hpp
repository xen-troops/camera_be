// SPDX-License-Identifier: GPL-2.0

/*
 * Xen para-virtualized camera backend
 *
 * Copyright (C) 2020 EPAM Systems Inc.
 */

#ifndef SRC_CONFIG_HPP_
#define SRC_CONFIG_HPP_

#include <exception>
#include <memory>
#include <string>

#include <libconfig.h++>

#include <xen/be/Log.hpp>

/***************************************************************************//**
 * Exception generated by Config class.
 * @ingroup config
 ******************************************************************************/
class ConfigException : public std::exception
{
public:
    explicit ConfigException(const std::string& msg) : mMsg(msg) {};
    virtual ~ConfigException() {}

    /**
     * returns error message
     */
    const char* what() const throw() { return mMsg.c_str(); };

private:
    std::string mMsg;
};

/***************************************************************************//**
 * Provides different settings for backends.
 * @ingroup config
 ******************************************************************************/
class Config final
{
public:
    explicit Config(std::string fileName);

    /*
     * Media pipeline configuration:
     * link - link descriptor to setup in the pipeline which is exactly
     *        the same string as one being passed to media-ctl utility
     *        using "-l" option.
     * x_fmt - format to propagate in the pipeline which is exactly
     *         the same string as one being passed to media-ctl utility
     *         using "-V" option.
     */
    struct PipelineConfig {
        std::string link1;
        std::string link2;
        std::string source_fmt;
        std::string sink_fmt;
    };

    const PipelineConfig& getPipelineConfig() { return mPipelineConfig; }

    Config(Config&&) = delete;
    Config(const Config&) = delete;
    void operator = (const Config&) = delete;

private:
    const char* cDefaultCfgName = "camera_be.cfg";

    XenBackend::Log mLog;
    libconfig::Config mConfig;

    void readPipelineConfig(PipelineConfig& config);
    PipelineConfig mPipelineConfig;
};

typedef std::shared_ptr<Config> ConfigPtr;

#endif /* SRC_CONFIG_HPP_ */
